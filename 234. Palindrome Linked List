/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head == NULL)
            return true;
        ListNode* fast = head;
        ListNode* slow = head;
        while(fast->next != NULL && fast->next->next != NULL)
        {
            slow=slow->next;
            fast=fast->next->next;
        }
        //when the loop breaks, slow = the mid element (when #elts = odd) and first mid elt otherwise
        //use slow->next to revers or make a mirror image of the second half
        
        ListNode* secondhalfhead = mirrorimageReverse(slow->next);
        ListNode* firsthalfhead = head;
        //compare them
        
        while(firsthalfhead != NULL && secondhalfhead != NULL)
        {
            if(firsthalfhead->val != secondhalfhead->val)
                return false;
            firsthalfhead = firsthalfhead->next;
            secondhalfhead = secondhalfhead->next;
        }
        return true;
    }
    private: ListNode* mirrorimageReverse (ListNode* head)
    {
        ListNode* current = head;
        ListNode* prev, *nextnode;
        prev = NULL;
        
        while(current != NULL)
        {
            nextnode=current->next;
            current->next = prev;
            prev = current;
            current = nextnode;
        }
        head = prev;
    
    return head;
    }
    
};
